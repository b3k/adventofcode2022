# Day 4: Camp Cleanup

```elixir
Mix.install([:kino])
```

## Main

```elixir
input = Kino.Input.textarea("input")
```

```elixir
input = Kino.Input.read(input)
```

```elixir
is_in_range = fn _left = [left_a, left_b], _right = [right_a, right_b] ->
  IO.inspect("#{left_a} >= #{right_a} && #{left_b} <= #{right_b}")
  left_a >= right_a && left_b <= right_b
end

is_overlaping = fn _left = [left_a, left_b], _right = [right_a, right_b] ->
  IO.inspect("#{left_a} <= #{right_b} && #{left_b} >= #{right_a}")
  left_a <= right_b && left_b >= right_a
end
```

```elixir
input
|> String.split("\n")
|> Enum.map(&String.split(&1, ",", trim: true))
|> Enum.map(fn item ->
  Enum.map(item, &String.split(&1, "-", trim: true))
  |> Enum.map(&[String.to_integer(List.first(&1)), String.to_integer(List.last(&1))])
end)
|> Enum.reduce(0, fn i, acc ->
  if is_in_range.(List.first(i), List.last(i)) or is_in_range.(List.last(i), List.first(i)) do
    acc + 1
  else
    acc
  end
end)
```

## Part 2

```elixir
input
|> String.split("\n")
|> Enum.map(&String.split(&1, ",", trim: true))
|> Enum.map(fn item ->
  Enum.map(item, &String.split(&1, "-", trim: true))
  |> Enum.map(&[String.to_integer(List.first(&1)), String.to_integer(List.last(&1))])
end)
|> Enum.reduce(0, fn i, acc ->
  if is_overlaping.(List.first(i), List.last(i)) do
    acc + 1
  else
    acc
  end
end)
```
